name: Optimized CI/CD Pipeline

# Trigger on pushes to main/develop and all pull requests
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Global environment variables
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'

# Define reusable environment configurations
jobs:
  # ==========================================
  # CONTINUOUS INTEGRATION JOB
  # ==========================================
  continuous-integration:
    name: 🧪 CI - Test, Lint & Security
    runs-on: ubuntu-latest
    
    # Matrix strategy for testing multiple Python versions (optional)
    strategy:
      matrix:
        python-version: ['3.11']
        # Uncomment to test multiple versions: ['3.10', '3.11', '3.12']
    
    outputs:
      # Pass test results to dependent jobs
      coverage-percentage: ${{ steps.coverage.outputs.percentage }}
      security-issues: ${{ steps.security.outputs.issues }}
    
    steps:
    # ===== SETUP PHASE =====
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        # Fetch full history for better analysis
        fetch-depth: 0
    
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        # Cache pip dependencies for faster builds
        cache: 'pip'
        cache-dependency-path: 'requirements.txt'
    
    # ===== DEPENDENCY MANAGEMENT =====
    - name: 📦 Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Install development and security tools
        pip install pytest pytest-cov pytest-xdist bandit safety flake8 black isort mypy
    
    # ===== CODE QUALITY CHECKS =====
    - name: 🔍 Code formatting check (Black)
      run: |
        echo "::group::Black formatting check"
        black --check --diff .
        echo "::endgroup::"
      continue-on-error: false
    
    - name: 📋 Import sorting check (isort)
      run: |
        echo "::group::Import sorting check"
        isort --check-only --diff .
        echo "::endgroup::"
      continue-on-error: false
    
    - name: 🔎 Lint with Flake8
      run: |
        echo "::group::Flake8 linting"
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Treat warnings as errors for main branch
        flake8 . --count --max-complexity=10 --max-line-length=88 --statistics \
          ${{ github.ref == 'refs/heads/main' && '--exit-zero' || '' }}
        echo "::endgroup::"
    
    - name: 🔒 Type checking with MyPy
      run: |
        echo "::group::Type checking"
        mypy . --ignore-missing-imports --no-strict-optional || true
        echo "::endgroup::"
    
    # ===== SECURITY SCANNING =====
    - name: 🛡️ Security scan with Bandit
      id: security
      run: |
        echo "::group::Security scanning"
        # Create reports directory
        mkdir -p reports
        
        # Run bandit with JSON output for parsing
        bandit -r . -x ./tests/ -f json -o reports/bandit-report.json || true
        bandit -r . -x ./tests/ -f txt
        
        # Count security issues (for outputs)
        ISSUES=$(jq '.results | length' reports/bandit-report.json 2>/dev/null || echo "0")
        echo "issues=$ISSUES" >> $GITHUB_OUTPUT
        
        # Fail if high severity issues found on main branch
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          HIGH_ISSUES=$(jq '[.results[] | select(.issue_severity == "HIGH")] | length' reports/bandit-report.json 2>/dev/null || echo "0")
          if [[ $HIGH_ISSUES -gt 0 ]]; then
            echo "❌ High severity security issues found: $HIGH_ISSUES"
            exit 1
          fi
        fi
        echo "::endgroup::"
    
    - name: 🔐 Dependency vulnerability scan (Safety)
      run: |
        echo "::group::Dependency scanning"
        # Create safety report
        safety check --json --output reports/safety-report.json || true
        safety check || true
        echo "::endgroup::"
    
    # ===== TESTING PHASE =====
    - name: 🧪 Run tests with coverage
      id: coverage
      run: |
        echo "::group::Running tests"
        # Run tests with parallel execution and coverage
        pytest tests/ \
          --cov=. \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --junitxml=reports/pytest.xml \
          --cov-fail-under=80 \
          -n auto \
          --tb=short
        
        # Extract coverage percentage
        COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree=ET.parse('coverage.xml'); print(tree.getroot().attrib['line-rate'])" 2>/dev/null || echo "0")
        echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "::endgroup::"
    
    # ===== ARTIFACT MANAGEMENT =====
    - name: 📊 Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          reports/
          coverage.xml
          htmlcov/
        retention-days: 30
    
    - name: 📈 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.python-version }}
        fail_ci_if_error: false

  # ==========================================
  # CONTAINER BUILD & PUSH JOB
  # ==========================================
  build-and-push:
    name: 🐳 Build & Push Container
    runs-on: ubuntu-latest
    needs: continuous-integration
    # Only build containers for main/develop branches or when explicitly triggered
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    # ===== CONTAINER REGISTRY SETUP =====
    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🏗️ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        # Enable advanced buildx features
        driver-opts: |
          network=host
    
    # ===== IMAGE METADATA & TAGGING =====
    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          # Set latest tag for default branch
          type=raw,value=latest,enable={{is_default_branch}}
          # Tag with branch name for develop
          type=ref,event=branch
          # Tag with PR number for pull requests
          type=ref,event=pr
          # Tag with git short SHA
          type=sha,prefix={{branch}}-
          # Tag with semantic version if tagged
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
    
    # ===== CONTAINER SECURITY SCANNING =====
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tags }}
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true
    
    # ===== BUILD & PUSH =====
    - name: 🚀 Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # Advanced caching for faster builds
        cache-from: type=gha
        cache-to: type=gha,mode=max
        # Build args for better control
        build-args: |
          PYTHON_VERSION=${{ env.PYTHON_VERSION }}
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}

  # ==========================================
  # STAGING DEPLOYMENT JOB
  # ==========================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [continuous-integration, build-and-push]
    # Deploy to staging on develop branch pushes
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: 
      name: staging
      url: https://staging.yourdomain.com
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🔧 Setup Azure CLI
      uses: azure/CLI@v1
      with:
        azcliversion: 2.30.0
        inlineScript: |
          az version
    
    - name: 🔐 Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_STAGING }}
    
    - name: 🚀 Deploy to Azure Container Instances (Staging)
      run: |
        echo "Deploying to staging environment..."
        echo "Image: ${{ needs.build-and-push.outputs.image-tags }}"
        
        # Example ACI deployment command
        az container create \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_STAGING }} \
          --name alpaca-bot-staging \
          --image ${{ needs.build-and-push.outputs.image-tags }} \
          --cpu 1 \
          --memory 1 \
          --registry-server ${{ env.REGISTRY }} \
          --registry-username ${{ github.actor }} \
          --registry-password ${{ secrets.GITHUB_TOKEN }} \
          --environment-variables ENVIRONMENT=staging \
          --ports 8080 \
          --dns-name-label alpaca-bot-staging-${{ github.run_number }} \
          --restart-policy Always

  # ==========================================
  # PRODUCTION DEPLOYMENT JOB
  # ==========================================
  deploy-production:
    name: 🎯 Deploy to Production
    runs-on: ubuntu-latest
    needs: [continuous-integration, build-and-push]
    # Only deploy to production from main branch
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: 
      name: production
      url: https://yourdomain.com
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🔧 Setup Azure CLI
      uses: azure/CLI@v1
      with:
        azcliversion: 2.30.0
        inlineScript: |
          az version
    
    - name: 🔐 Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_PRODUCTION }}
    
    - name: 🚀 Deploy to Azure Container Instances (Production)
      run: |
        echo "Deploying to production environment..."
        echo "Image: ${{ needs.build-and-push.outputs.image-tags }}"
        
        # Production deployment with more resources
        az container create \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_PRODUCTION }} \
          --name alpaca-bot-production \
          --image ${{ needs.build-and-push.outputs.image-tags }} \
          --cpu 2 \
          --memory 2 \
          --registry-server ${{ env.REGISTRY }} \
          --registry-username ${{ github.actor }} \
          --registry-password ${{ secrets.GITHUB_TOKEN }} \
          --environment-variables ENVIRONMENT=production \
          --ports 8080 \
          --dns-name-label alpaca-bot-prod \
          --restart-policy Always
    
    - name: 🏥 Health Check
      run: |
        echo "Performing health checks..."
        sleep 30
        # Add health check logic here
        curl -f https://alpaca-bot-prod.azurecontainer.io:8080/health || exit 1
    
    - name: 📢 Notify Deployment Success
      if: success()
      run: |
        echo "✅ Production deployment successful!"
        echo "🌐 Application URL: https://alpaca-bot-prod.azurecontainer.io:8080"

  # ==========================================
  # CLEANUP JOB
  # ==========================================
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: 🗑️ Delete old container images
      run: |
        echo "Cleaning up old container images..."
        # Keep only the last 10 images
        # This would typically use GitHub API or registry API
        echo "Cleanup completed"