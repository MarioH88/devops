# Azure DevOps CI/CD Pipeline for Alpaca Trading Bot
# Demonstrates: Build, Test, Security Scan, Deploy
trigger:
- main
- develop

variables:
  pythonVersion: '3.11'
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: 'Build and Test Stage'
  jobs:
  - job: Build
    displayName: 'Build Job'
    pool:
      vmImage: $(vmImageName)
    
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'
    
    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov bandit safety flake8
      displayName: 'Install dependencies'
    
    - script: |
        # Code quality checks
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      displayName: 'Lint with flake8'
    
    - script: |
        # Security scan
        bandit -r . -x ./tests/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
      displayName: 'Security scanning'
    
    - script: |
        # Unit tests with coverage
        pytest tests/ --cov=. --cov-report=xml --cov-report=html
      displayName: 'Run tests with coverage'
    
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: '**/test-*.xml'
        testRunTitle: 'Publish test results for Python $(python.version)'
    
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'

- stage: SecurityScan
  displayName: 'Security and Compliance'
  dependsOn: Build
  jobs:
  - job: SecurityScan
    displayName: 'Security Scanning'
    pool:
      vmImage: $(vmImageName)
    
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'
    
    - script: |
        pip install bandit safety
        bandit -r . -f json -o bandit-report.json
        safety check --json --output safety-report.json
      displayName: 'Security vulnerability scan'
    
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: 'bandit-report.json'
        artifactName: 'SecurityReports'

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: SecurityScan
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployToDev
    displayName: 'Deploy to Development'
    pool:
      vmImage: $(vmImageName)
    environment: 'development'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              echo "Deploying Trading Bot to Development Environment"
              echo "Starting health checks..."
            displayName: 'Deploy to Dev Environment'
          
          - script: |
              # Health check simulation
              python -c "
              import requests
              print('âœ… Health check passed')
              print('ðŸ“Š Dashboard accessible')
              print('ðŸ¤– Bot services running')
              "
            displayName: 'Health Check'